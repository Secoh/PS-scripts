#
# DO NOT RUN THIS FILE DIRECTLY
#
#   Copyright (2020) Secoh
#   Licensed under the Apache License, Version 2.0
#   http://www.apache.org/licenses/LICENSE-2.0
#   Distributed on an "as-is" basis, without warranties or
#   conditions of any kind.
#

$config_name = ".\mock_cert.config"

function Get-Config-Item($itemname)
{
  $selection = ( Get-Content $config_name | Select-String -Pattern $itemname )
  if ("$selection" -ne "") { ( ($selection)[-1] -split $itemname )[-1].trim() }

# was:  ( ( Get-Content $config_name | Select-String -Pattern $itemname ) -split $itemname )[-1].trim()
}

echo "-------------------------------------------------"
echo "SIGN AND PACKAGE DRIVER SESSION $(Get-Date)"

$cert_name = Get-Config-Item "Cert-Name:"
$file_name = Get-Config-Item "Cert-File-Name:"
$text_pass = Get-Config-Item "Key-Password:"

$inf_tools_path = Get-Config-Item "Sign-Tools-Path:"
$iso_tools_path = Get-Config-Item "ISO-Tools-Path:"

$infverif_path = Get-Config-Item "Infverif-Path:"

$volid  = Get-Config-Item "ISO-Volume:"
$appid  = Get-Config-Item "ISO-Application:"
$author = Get-Config-Item "ISO-Publisher:"

if ("$cert_name" -eq "" -or "$file_name" -eq "" -or "$text_pass" -eq "")
{
echo "ERROR: Certificate name, Output file name, and Password must not be empty"
exit
}

$path="C:\Windows\System32"

#
# Start with single INF file in TMP, prepare CAT
#

if ((Get-Item ".\TMP\*").count -ne 1 -or (Get-Item ".\TMP\*" -Filter "*.inf").count -ne 1)
{
echo "ERROR: There must be one single INF file in the TMP directory"
exit
}

if ((Get-Item ".\*" -Filter "*.iso.zip").count -gt 0 -or (Get-Item ".\*" -Filter "*.iso").count -gt 0)
{
echo "ERROR: There must be no ISO or compressed ISO files in the current directory"
exit
}

echo "*** Testing INF file ***"
$inf_file = Get-Item ".\TMP\*.inf"
& "$infverif_path\infverif" "$inf_file"

echo "*** Creating CAT file ***"
& "$inf_tools_path\Inf2Cat" /driver:.\TMP /os:7_X64,7_X86

$cat_file = Get-Item ".\TMP\*.cat"

if (($cat_file).count -ne 1)
{
echo "ERROR: Cannot create CAT file, check your INF file for errors"
exit
}

#
# Prepare binary PFX
#

if ((Get-Item "$file_name.*" -Filter "$file_name.pfx").count -ne 1)
{
echo "ERROR: No signing certificate found - $file_name.pfx"
exit
}

echo "*** Get binary PFX ***"
certutil -decode "$file_name.pfx" ".\TMP\signing-cert.pfx.bin"

#
# Sign driver, copy certificate injection
#

echo "*** Signing CAT file ***"
& "$inf_tools_path\signtool" sign /v /f ".\TMP\signing-cert.pfx.bin" /p "$text_pass" "$cat_file"
del ".\TMP\signing-cert.pfx.bin"

if ((Get-Item "$file_name.*" -Filter "$file_name.cer").count -ne 1)
{
echo "ERROR: No public certificate found - $file_name.cer"
exit
}

echo "*** Copying public certificate ***"
copy "$file_name.cer" ".\TMP"
$cer_file = (Get-Item ".\TMP\*.cer").name

#echo "@echo off", "", "REM   Must run this program as Administrator", "", `
#     "certutil -addstore TrustedPublisher %~dp0$cer_file", `
#     "certutil -addstore Root %~dp0$cer_file" `

echo "@echo off", `
     "", `
     "REM   This script requires Administrator privileges", `
     "", `
     "REM   Autogenerated by INF signing scripts (c) Secoh, 2020", `
     "REM   Licensed under the Apache License, Version 2.0", `
     "", `
     "net session > nul 2>&1", `
     "if %errorlevel% equ 0 goto :doinstall", `
     "", `
     "echo This script must be run with Administrator privileges", `
     "pause", `
     "exit", `
     "", `
     ":haserror", `
     "echo The last operation returns error, see the above for details", `
     "pause", `
     "exit", `
     "", `
     ":doinstall", `
     "certutil -addstore TrustedPublisher %~dp0$cer_file", `
     "if %errorlevel% neq 0 goto :haserror", `
     "certutil -addstore Root %~dp0$cer_file"
     "if %errorlevel% neq 0 goto :haserror" `
 | Out-File -Encoding ASCII -FilePath ".\TMP\inject_cert.bat"

#
# Make ISO and compress it
#

$inf_file = (Get-Item ".\TMP\*.inf").name

echo "To install this driver, do the following steps:", `
     "1. Run script `"inject_cert.bat`" as Administrator", `
     "2. Install file `"$inf_file`"", "" `
     "Manual alternative:",
     "- Open local computer certificates in MMC console", `
     "- Import the certificate `"$cer_file`" to both `"Trusted Publishers`" and", `
     "  `"Trusted Root Certification Authorities`"", `
     "- Plug in the USB device covered by this driver", `
     "- When device is discovered, update its driver with the file `"$inf_file`"" `
 | Out-File -Encoding ASCII -FilePath ".\TMP\readme.txt"

echo "*** Making compressed ISO ***"

$iso_name = ($inf_file -split ".inf")[0]
& "$iso_tools_path\mkisofs" -r -J -o "$iso_name.iso" -V "$volid" -sysid Win32 -publisher "$author" -A "$appid" -no-pad -no-cache-inodes .\TMP
move "$iso_name.iso" ".\TMP"

Compress-Archive ".\TMP\$iso_name.iso" "$iso_name.iso.zip"

#
# Delete garbage
#

echo "*** Cleanup ***"
del ".\TMP\*"
rmdir ".\TMP"
